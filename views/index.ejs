<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <script type="text/javascript" src="bower_components/d3/d3.min.js"></script>
    <script type="text/javascript" src="bower_components/jquery/dist/jquery.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.3.0/katex.min.js"></script>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.3.0/katex.min.css">
    
  </head>
  <body>
<xmp theme="cerulean" style="display:none;">

# <%= title %>
<p>Welcome to my blog</p>
<p>Click on any dot below to begin</p>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>
    <p> Here's some math for you</p>
<span class="katex">c = \pm\ sqrt(a^2 + b^2)</span>


# Markdown text goes in here

## Click on any of the below to find a post:

<p> <a href="http://liamcwalsh.herokuapp.com/discrete_choice"> Discrete Choice Price Optimization </a></p>
<p> <a href ="http://liamcwalsh.herokuapp.com/opt_approx"> Approximating the Lambert W Function and Optimal Price </a></p>

</xmp>


<script src="http://strapdownjs.com/v/0.2/strapdown.js"></script>

<script type="text/javascript">
$(".katex").each(function() {
  katex.render(this.innerHTML, this, {displayMode: true });
});
</script>
<script>

var width = 960,
    height = 500;

var nodes = d3.range(200).map(function() { return {radius: Math.random() * 12 + 4}; }),
    root = nodes[0],
    color = d3.scale.category10();

 var topics = [
"Math", "Price", "Optimization"
]
for (var i=0; i<topics.length; i++) {
  nodes[i].name = topics[i];
  nodes[i].radius = 30;
}


root.radius = 0;
root.fixed = true;

var force = d3.layout.force()
    .gravity(0.05)
    .charge(function(d, i) { return i ? 0 : -2000; })
    .nodes(nodes)
    .size([width, height]);

force.start();

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

svg.selectAll("circle")
    .data(nodes.slice(1))
  .enter().append("circle")
    .attr("r", function(d) { return d.radius; })
    .style("fill", function(d, i) { return color(i % 3); })
	

force.on("tick", function(e) {
  var q = d3.geom.quadtree(nodes),
      i = 0,
      n = nodes.length;

  while (++i < n) q.visit(collide(nodes[i]));

  svg.selectAll("circle")
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; });
});

svg.on("mousemove", function() {
  var p1 = d3.mouse(this);
  root.px = p1[0];
  root.py = p1[1];
  force.resume();
});

function collide(node) {
  var r = node.radius + 16,
      nx1 = node.x - r,
      nx2 = node.x + r,
      ny1 = node.y - r,
      ny2 = node.y + r;
  return function(quad, x1, y1, x2, y2) {
    if (quad.point && (quad.point !== node)) {
      var x = node.x - quad.point.x,
          y = node.y - quad.point.y,
          l = Math.sqrt(x * x + y * y),
          r = node.radius + quad.point.radius;
      if (l < r) {
        l = (l - r) / l * .5;
        node.x -= x *= l;
        node.y -= y *= l;
        quad.point.x += x;
        quad.point.y += y;
      }
    }
    return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
  };
}

</script>
  </body>
</html>


