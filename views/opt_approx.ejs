<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <script type="text/javascript" src="bower_components/d3/d3.min.js"></script>
    <script type="text/javascript" src="bower_components/jquery/dist/jquery.min.js"></script>
    <script src="bower_components/katex/dist/katex.min.js"></script>
    <link rel='stylesheet' href='bower_components/katex/dist/katex.min.css' />
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel='stylesheet' href='/stylesheets/cerulean.min.css' />
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.3.0/katex.min.css">

   </head>
   <body>
<xmp theme="cerulean" style="display:none;">

## Background

<p> In my <a href="http://liamcwalsh.herokuapp.com/discrete_choice">last post</a>, I derived the optimal price for a business to charge to generate maximum revenue under a discrete choice system. Recall that the optimal price took the form: </p>

<span class="katex"> p^*=-\frac{W(e^{ \alpha -1}) +1}{\beta} </span>

<p>Where &alpha; is a parameter which details how interested the customer is in the product, and &beta; determines how much the price of the good affects the customer's desire to purchase the good. W is the Lambert W function. </p>

<p> Finally, at the end of the post, I discovered that while there is an explicit formula for the optimal price (the equation shown above), computationally, the particular implementation I had used to find the Lambert W function was much slower than a standard numerical optimization. </p>

## History of the Lambert W Function

<p> 

## Approximating the Lambert W Function

<p> The main reason why the explicit equation is too slow to use is because of the Lambert W function. This function has no easy explicit formula, and as such, is represented in complicated and long series expansions. This is taxing to any computer, and bumps up the runtime significantly. </p>

<p> However, if you look at a graph of W(e^x), you can notice one thing right away: </p>

<img src="/images/blog/lambertapprox/lambert_exp_graph.png" style="width: 500px; margin: 0 auto; display: block;"/>

<p> The graph is nearly linear! This would indicate that perhaps there exists a fairly simple approximation to the Lambert W function, which could significantly improve the runtime of the analytic calculation fo the optimal price. </p>

## First Order Approximation

<p> <a href="http://mathworld.wolfram.com/LambertW-Function.html"> According to Wolfram Mathworld</a>, The Lambert W function W(x) has a first order approximation of the form: </p>

<span class="katex"> W(x)=ln(x) - ln(ln(x))+ o(1) </span>

<p> Then, since we want to approximate W(e^x), this simplifies to: </p>

<span class="katex"> W(e^x)=x-ln(x) +o(1) </span>

<p> This approximation is fairly accurate. I graphed W(e^x)/(x-ln(x)), which approaches 1 as the approximation becomes more accurate: </p>

<img src="/images/blog/lambertapprox/first_order_lamb_approx.png" style="width: 500px; margin: 0 auto; display: block;"/>

<p>Clearly, this approximation is not perfect. To be more precise, when x=4, the error between the approximation and the actual value was 10.86% </p>

## Second Order Approximation

<p> The first order approximation found above is helpful, but very limited. For one, even at x=4, the error is still greater than 10%. Further, if I wanted a better accuracy, I would have to make x even bigger. In the context of the optimal price discussion, this means increasing &alpha;, which means dealing exclusively with consumers who are very interested in the product. This limits the use of the first order approximation severely, since the whole market of people of might buy the good are not composed solely of people who are interested in the good. </p>

<p> Luckily enough, however, <a href="http://mathworld.wolfram.com/LambertW-Function.html"> Wolfram Mathworld</a> has an equation for the second order approximation of the Lambert W function: </p>

<span class="katex"> W(x)=ln(x)-ln(ln(x))+\frac{ln(ln(x))}{ln(x)}+o(2) </span>

<p> Or, for our purposes: </p>

<span class="katex"> W(e^x)=x-ln(x)+\frac{ln(x)}{x}+o(2) </span>

<p> This approximation is very accurate: </p>

<img src="/images/blog/lambertapprox/second_order_lamb_approx.png" style="width: 500px; margin: 0 auto; display: block;"/>

<p> The reason why the x values start at 1 is because the approximation does not hold for x=0, as that results in division by 0. Also, at x=1, the graph is at 1 on the y-axis. This is because W(e)=1, and the approximation=1 for x=1. At x=2, the error is only 6.18%, which is already much better than the first order approximation, for a lower x value. </p>

## Third Order Approximation

<p> Again, from <a href="http://mathworld.wolfram.com/LambertW-Function.html"> Wolfram MathWorld </a>, there is a third order approximation to the Lambert W function, which, when using W(e^x), takes the following form:</p>

<span class="katex"> W(e^x)=x-ln(x)+\frac{ln(x)}{x} + \frac{ln(x)(ln(x)-2)}{2x^2}+o(3) </span>

<p> This approximation, as expected, is the most accurate so far: </p>

<img src="/images/blog/lambertapprox/third_order_lamb_approx.png" style="width: 500px; margin: 0 auto; display: block;"/>

<p> Here, the approximation starts extremely close to 1, indicating that it is very accurate. For x=2, the percent error was only 1.09%. </p>

## Approximation and the Optimal Price

<p> Now that we have these approximations for the Lambert W function, we can examine it in the context of the optimal price equation. We know that the first order approximation for W(e^x) is accurate for x&gt;4. Thus, in this model, the first order approximation is accurate for &alpha;-1&gt;4, or, &alpha;&gt;5. Conceptually, what does this mean? Recall that α represents the preferences of a consumer regarding this particular good. However, these preferences are not dependent on price. One can think of these preferences of the aspects of the good the consumer finds appealing. For example, if we consider a computer to be the good in question, α represents how much the consumer likes the speed, design, battery life, etc. of the computer. A large α, then, means that the good on its own is already very appealing to the consumer. Referring back to the computer example, it means that this consumer is already pretty hooked on the computer. They like how fast it is, and are in love with the design. Thus, this approximation can be used when, and only when, the consumer is already interested in the product. </p>

<p> The second order approximation, however, is accurate for x&gt;1, or &alpha;&gt;2. In this case, we are no longer restricted to consumers who are already very interested in the good, but instead, we can consider any consumer, regardless of interest in the product. </p>

<p> Finally, the third order approximation performed the best overall.  Just like the second order approximation, it is accurate for x&gt;1, or &alpha;&gt;2. </p>

## Computation Speed

<p> While finding the explicit formulas for the Lambert W function approximations is interesting, the true purpose of these approximations is to make the Lambert W function more usable. in a sense. That is, it is to reduce the difficulty of using the Lambert W function by providing an accurate, but fairly straightforward approximation for the function. For our purposes, we want to know the runtimes of the approximations, to see if they can viable replace the simple numerical search for the optimal price. </p>

<p> First, I compared the runtimes between all three approximations:</p>

<img src="/images/blog/lambertapprox/approx_runtime_comp.png" style="width: 500px; margin: 0 auto; display: block;"/> 

<p> With runtimes of around 3*10^-7, these approximations are fast, and effectively interchangeable speedwise. However, we want to know if these approximations are faster than the typical numerical search:
</p>

<img src="/images/blog/lambertapprox/numer_vs_approx_runtime.png" style="width: 500px; margin: 0 auto; display: block;"/> 

<p> In this case, I compared the runtime of the 1st order approximation, which clocked in at an average time of 3.6267*10^-7 s. The numerical runtime, however, was significantly slower, taking, on average, .0301s. </p>
</xmp>

<script src="bower_components/strapdown/strapdown.js"></script>
<link rel="stylesheet" href="bower_components/strapdown/strapdown.css">

<script type="text/javascript">
 $(".katex").each(function() {
  katex.render(this.innerHTML, this, {displayMode: true });
});
</script>	
  </body>
</html>




