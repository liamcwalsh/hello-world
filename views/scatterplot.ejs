<!DOCTYPE html>
<html>
<head>
	<title><%= title %></title>
	<script type="text/javascript" src="/bower_components/d3/d3.min.js"></script>
	<link rel='stylesheet' href='/stylesheets/style.css'/>
</head>
<body>
	<p> Click to change data </p>
	
	<clipPath id="chart-area">
		<rect x="30" y="30" width="410" height="240"></rect>
	</clipPath>
	
	<script type="text/javascript">
		var wscatter = 500;
		var hscatter = 300;
		var padding = 30;
		
			//Create SVG element
			var svg = d3.select("body")
			.append("svg")
			.attr("width", wscatter)
			.attr("height", hscatter);

			var numPoints = 50;
			var scatter=[];
			var maxRange = Math.random() * 1000;						
			for (var i = 0; i < numPoints; i++) {					
				var newNumber1 = Math.floor(Math.random() * maxRange);	
				var newNumber2 = Math.floor(Math.random() * maxRange);	
				scatter.push([newNumber1, newNumber2]);					
			}

			
			var scale = d3.scale.linear()
			.domain([100,500])
			.range([10,350]);

			var xScale = d3.scale.linear()
			.domain([0,d3.max(scatter,function(d){return d[0];})])
			.range([padding,wscatter-padding*2]);

			var yScale = d3.scale.linear()
			.domain([0,d3.max(scatter,function(d){return d[1];})])
			.range([hscatter-padding,padding]); // putting h first inverses the size,, smaller y is higher


			var xAxis = d3.svg.axis()
						.scale(xScale)
						.orient("bottom");

			var yAxis = d3.svg.axis()
						.scale(yScale)
						.orient("left")
						.ticks(5);

			// create circles. Instead of using "circles", this allows for clipping fixes
			svg.append("g")
			.attr("id","circles")
			.attr("clip-path","url(#chart-area)")
			.selectAll("circle")
			.data(scatter)
			.enter()
			.append("circle")
			.attr("cx", function(d) {
				return xScale(d[0]);
			})
			.attr("cy", function(d) {
				return yScale(d[1]);
			})
			.attr("r", 2);

			svg.append("g")
				.attr("class","x axis")
				.attr("transform","translate(0," + (hscatter-padding) + ")") //moves the g thing to  															specific location
				.call(xAxis); //This is put at the end so it shows on top, above the other stuff
							 // "g" means group, which is not a set object itself, but instead is drawn given the requirements you input

			svg.append("g")
				.attr("class","y axis")
				.attr("transform","translate(" + padding + ")")
				.call(yAxis);



			svg.append("clipPath")
			.attr("id","chart-area")
			.append("rect")
			.attr("x",padding)
			.attr("y",padding)
			.attr("width",wscatter-padding*3)
			.attr("height",hscatter-padding*2);


			d3.select("p")
				.on("click",function(d){
					var scatter=[];
					var maxRange = Math.random() * 1000;						
					for (var i = 0; i < numPoints; i++) {					
						var newNumber1 = Math.floor(Math.random() * maxRange);	
						var newNumber2 = Math.floor(Math.random() * maxRange);	
						scatter.push([newNumber1, newNumber2]);					
					}

					xScale.domain([0,d3.max(scatter,function(d){return d[0];})])

					yScale.domain([0,d3.max(scatter,function(d){return d[1];})])

					svg.selectAll("circle")
					.data(scatter)
					.transition()
					.duration(1000)
					.each("start",function(d){ //execute something at start of movement
						d3.select(this)
						.attr("fill","magenta")
						.attr("r",5);
					})
					.attr("cx", function(d) {
						return xScale(d[0]);
					})
					.attr("cy", function(d) {
						return yScale(d[1]);
					})
					.transition()
					.duration(1000)
					.attr("fill","black")
					.attr("r",2); // you can also use each("end",func), but this is cleaner looking


					svg.select(".x.axis")
					.transition()
					.duration(1000)
					.call(xAxis);

					svg.select(".y.axis")
					.transition()
					.duration(1000)
					.call(yAxis);

				})

		</script>
	</body>
	</html>
